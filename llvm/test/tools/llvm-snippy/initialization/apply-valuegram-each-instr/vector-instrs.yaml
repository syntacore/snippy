# REQUIRES: riscv-rvv
# COM: This test checks that before each instruction (RVV), 
# COM: the registers it uses are initialized. They are initialized only according to the histogram.

# COM: Because this functionality has not yet been implemented for rvv
# XFAIL: *

# RUN: llvm-snippy %s \
# RUN:    -valuegram-operands-regs=%S/Inputs/histograms.yaml \
# RUN: |& FileCheck %s 

options:
  march: riscv64
  mcpu: generic-rv64
  mattr: +v
  dump-mf: true
  num-instrs: 1000

sections:
    - no:        0
      VMA:       0x10000
      SIZE:      0x40000
      LMA:       0x10000
      ACCESS:    r
    - no:        1
      VMA:       0x100000
      SIZE:      0x1000000
      LMA:       0x100000
      ACCESS:    rx
    - no:        2
      VMA:       0x2100000
      SIZE:      0x100000
      LMA:       0x2100000
      ACCESS:    rw

riscv-vector-unit:
  mode-change-bias:
    P: 0.001
  mode-distribution:
    VM:
      - [all_ones, 2.0]
      - [any_legal, 1.0]
    VL:
      - [vlmax, 2.0]
      - [any_legal, 1.0]
    VXRM:
      rnu: 1.0
      rne: 1.0
      rdn: 1.0
      ron: 1.0
    VXSAT:
      on: 1.0
      off: 1.0
    VTYPE:
      SEW:
        sew_8: 1.0
        sew_16: 1.0
        sew_32: 1.0
        sew_64: 1.0
      LMUL:
          m8: 1.0
          m4: 1.0
          m2: 1.0
          m1: 1.0
          mf2: 1.0
          mf4: 1.0
          mf8: 1.0
      VMA:
        mu: 1.0
        ma: 1.0
      VTA:
        tu: 1.0
        ta: 1.0
 
histogram:
       - [VADD_VV, 1.0]
       - [VAADDU_VV, 1.0]
       - [VAADD_VV, 1.0]
       - [VAADD_VX, 1.0]
       - [VADC_VIM, 1.0]
       - [VADC_VXM, 1.0]
       - [VAND_VV, 1.0]
       - [VASUBU_VV, 1.0]
       - [VASUBU_VX, 1.0]
       - [VASUB_VV, 1.0]
       - [VASUB_VX, 1.0]
       - [VCPOP_M, 1.0]
       - [VDIVU_VV, 1.0]
       - [VDIVU_VX, 1.0]
       - [VDIV_VV, 1.0]
       - [VFADD_VV, 1.0]
       - [VFCLASS_V, 1.0]
       - [VFNMSAC_VV, 1.0]
       - [VXOR_VI, 1.0]
       - [VXOR_VV, 1.0]
       - [VXOR_VX, 1.0]
        
#          Valuegram values:
#
#                     X: 0, 1, 255.
#                     V: 3, 4.
#                     We want to see them in initialization 
#         
#          An example of what we're matching:
#
#                       ... vsetvl ...
#                     $x7 = ADDI $x0, 3, pcsections <0x5593184a4158>
#                     $v8 = VSLIDE1DOWN_VX undef $v8, $x7 ... 
#                       ... vsetvl ...

# Initialization a vector register takes about 50 instructions. We just check that initialization from the histograms.yaml is encountered
# 
# CHECK-COUNT-100: [[REG:\$x[0-9]+]] = ADDI $x0, {{(3|4).*[[:space:]].*}}[[VREG:\$v[0-9]+]] = VSLIDE1DOWN_VX undef [[VREG]], [[REG]]

