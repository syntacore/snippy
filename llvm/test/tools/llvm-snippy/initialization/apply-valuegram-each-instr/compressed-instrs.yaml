# COM: This test checks that before each instruction (compressed), the registers 
# COM: it uses are initialized and repeated operands are initialized only once.

# RUN: llvm-snippy %s \
# RUN:    -valuegram-operands-regs=%S/Inputs/histograms.yaml \
# RUN: |& FileCheck %s --check-prefix TWO_OPERANDS

# RUN: llvm-snippy %s \
# RUN:    -valuegram-operands-regs=%S/Inputs/histograms.yaml \
# RUN: |& FileCheck %s --check-prefix THREE_OPERANDS

options:
  march: riscv64
  mcpu: generic-rv64
  mattr: +c
  num-instrs: 1000
  dump-mf: on

sections:
    - no:        0
      VMA:       0x10000
      SIZE:      0x40000
      LMA:       0x10000
      ACCESS:    r
    - no:        1
      VMA:       0x100000
      SIZE:      0x100000
      LMA:       0x100000
      ACCESS:    rx
    - no:        2
      VMA:       0x210000
      SIZE:      0x100000
      LMA:       0x210000
      ACCESS:    rw

histogram:
    - [C_ADD, 1.0]
    - [C_ADDI, 1.0]
    - [C_ADDI16SP, 1.0]
    - [C_ADDI4SPN, 1.0]
    - [C_ADDIW, 1.0]
    - [C_ADDW, 1.0]
    - [C_AND, 1.0]
    - [C_ANDI, 1.0]
    - [C_LUI, 1.0]
    - [C_OR, 1.0]
    - [C_SLLI, 1.0]
    - [C_SRAI, 1.0]
    - [C_SRLI, 1.0]
    - [C_SUB, 1.0]
    - [C_SUBW, 1.0]
    - [C_XOR, 1.0]


#          Valuegram values:
#
#                     X: 0, 1, 255.
#                     We want to see them in initialization 
#         
#          An example of what we're matching:
#
#          Two_operands:    
#
#                     $x2 = ADDI $x0, 0, pcsections <0x55b3053da8a8>
#                     $x2 = C_ADDI $x2(tied-def 0), -28
#
#          Three_operands:    
#
#                     $x14 = ADDI $x0, 1, pcsections <0x55bf929fe9c8>
#                     $x8 = ADDI $x0, 255, pcsections <0x55bf929fe9c8>
#                     $x14 = C_OR $x14(tied-def 0), $x8
        
# TWO_OPERANDS-COUNT-100: [[REG0:\$x[0-9]+]] = ADDI $x0, {{(0|1|255).*[[:space:]].*}}[[REG0]] = C_{{.*}}I [[REG0]]

# THREE_OPERANDS-COUNT-100: [[REG1:\$x[0-9]+]] = ADDI $x0, {{(0|1|255).*[[:space:]].*}}[[REG2:\$x[0-9]+]] = ADDI $x0, {{(0|1|255).*[[:space:]].*}}[[REG1]] = C_{{.*}} [[REG1]](tied-def 0), [[REG2]]
