//===-- MemAccessInfo.h -----------------------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
#pragma once

#include "snippy/Config/MemoryScheme.h"

namespace llvm {
namespace snippy {

using BurstGroupAccessDesc = std::vector<AddressInfo>;
using PlainAccessesType = std::vector<AccessAddress>;
using BurstGroupAccessesType = std::vector<BurstGroupAccessDesc>;

class MemAccessInfo {
public:
  void addMemAccess(MemAddr Addr, size_t AccessSize) {
    PlainAccesses.emplace_back(AccessAddress{Addr, AccessSize});
  }
  void addBurstRangeMemAccess(BurstGroupAccessDesc BurstAccess) {
    BurstRangeAccesses.emplace_back(std::move(BurstAccess));
  }
  void addBurstPlainMemAccess(MemAddr Addr, size_t AccessSize) {
    BurstPlainAccesses.emplace_back(AccessAddress{Addr, AccessSize});
  }
  const PlainAccessesType &getMemAccesses() const { return PlainAccesses; }
  const BurstGroupAccessesType &getBurstRangeAccesses() const {
    return BurstRangeAccesses;
  }
  const PlainAccessesType &getBurstPlainAccesses() const {
    return BurstPlainAccesses;
  }

private:
  // Keeps all memory accesses generated by main instructions.
  PlainAccessesType PlainAccesses;
  // Keeps all range-based description of memory accesses generated by
  // instructions from burst groups.
  BurstGroupAccessesType BurstRangeAccesses;
  // Keeps all memory accesses generated by instructions from burst groups. One
  // instruction in burst group = one address.
  PlainAccessesType BurstPlainAccesses;
};

} // namespace snippy
} // namespace llvm
